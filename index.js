//will immediately specify requirements. require should include fs, inquirer, not sure what else.
// const util = require('util');
//util unecessary to require if I am requiring generateHtml under a const later
// const outputpath = path.join(output_dir, "generatedTeam.html");
//classes will be pulled from /lib folder. necessary classes include Manager, Intern, Engineer. employee will be constructor class?
//classes should be capitalized
// const path = require('path');
// const output_dir = path.resolve(__dirname, "output");
const fs = require('fs');
const inquirer = require('inquirer');
const teamMembers = [];
const Employee = require('./lib/Employee');
const Manager = require('./lib/Manager');
const Intern = require('./lib/Intern');
const Engineer = require('./lib/Engineer');
const generateTeam = require('./util/generateHtml')
module.exports = teamMembers;
//need to add teamMembers to export for use in array generated by generateHtml.
//Know that function to add employees will be next. unsure of whether to use wrapper function or individual for inquirer.prompt.
//I am not sure about asynchronicity yet. This is something to figure out after I have written prompter function to see if it is working in sequence improperly.
//prompt function with be a variable (wrapper function?) so as to be called on later
//need to write file asynchronously. this will use both fs and util + promisfy
//Was explained by TA that promisify and async are not necessary for this function and actually overcomplicated what I am trying to do. 
//unclear to me still whether I need to convert promptSelf to an async function. Going to ask tutor today. 
//const writeFileAsync = util.promisify(fs.writeFile);


//took path without async to write file since write function can simply wait until all user input is complete before attempting write anyways. 
const writeFile = (data) => {
    fs.writeFile('./yourTeam.html', data, (err) =>
        err ? console.error(err) : console.log('file written successfully'))
};


//adjusted prompt self function to reflect user input and trigger other adds from here
const promptSelf = () => {
    return inquirer.prompt([
        {
            type: 'list',
            name: 'role',
            message: 'What is your role at the company?',
            choices: ['Manager', 'Engineer', 'Intern'],
            validate: roleChosen => {
                if (roleChosen === 'Manager') {
                    return addManager();
                } else if (roleChosen === 'Engineer') {
                    return addEngineer();
                } else {
                    return addIntern();
                }
            }
        },
        {
            type: 'input',
            name: 'name',
            message: 'Please enter your name (Required)',
            validate: nameInput => {
                if (nameInput) {
                    return true;
                } else {
                    console.log('Please enter your name before continuing.');
                    return false;
                }
            }
        },
        {
            type: 'input',
            name: 'employeeId',
            message: 'Please enter your employee id (Required)',
            validate: employeeId => {
                if (employeeId) {
                    return true;
                } else {
                    return false;
                }
            }
        }, 
        {
            type: 'input',
            name: 'email',
            message: 'Please enter your email address (Required)',
            validate: emailEntered => {
                if (emailEntered) {
                    return true;
                } else {
                    return false;
                }
            }
        }
    ]).then(answers => {
        //employeeSelf is added to array as person actually taking the survey. This assumes, functionally, that they work at the company, which could be awkward but it is worded in a way that tries to make it make sense. 
        const employeeSelf = new Employee(answers.name, answers.employeeId, answers.email, answers.role);
        teamMembers.push(employeeSelf)
        promptInquirer();
    })
};
//call upon inquirer package.
//we will need to be careful about defining what input we want from the user so as to pass tests
const promptInquirer = () => {
    //will return the requirer prompt and begin the command line process; thus the prompt needs an array of inputs to call on for the user to enter
    //this whole function is sort of like a character creator that the HTML will use to build the "characters" as created by user input
    return inquirer.prompt([
        {
            type: 'list',
            name: 'menu',
            message: 'What would you like to do?',
            choices: ['add a manager to my team', 'add an engineer to my team', 'add an intern to my team', 'I am done building my team']
        }])
        .then(chooseOption => {
            switch (chooseOption.menu) {
                case "add a manager to my team":
                    addManager();
                    break;
                case "add an engineer to my team":
                    addEngineer();
                    break;
                case "add an intern to my team":
                    addIntern();
                    break;
                default: 
                    writeFile(generateTeam(teamMembers));
                    console.log('Your team is complete.')
                    break;
            }
        });
    };

    const addManager = () => {
        console.log(
            `Add your managers's details`
        );

        return inquirer.prompt ([
            {
                type: 'input',
                name: 'name',
                message: 'What is your managers name? (Required)',
                validate: managerName => {
                    if (managerName) {
                        return true;
                    } else {
                        return false;
                    }
                }
            },
            {
                type: 'input',
                name: 'id',
                message: 'What is your managers id? (Required)',
                validate: managerId => {
                    if (managerId) {
                        return true;
                    } else {
                        return false;
                    }
                }
            },
            {
                type: 'input',
                name: 'email',
                message: 'What is your managers email? (Required)',
                validate: managerEmail => {
                    if (managerEmail) {
                        return true;
                    } else {
                        return false;
                    }
                }
            },
            {
                type: 'input',
                name: 'officeNumber',
                message: 'What is your managers office number? (Required)',
                validate: managerOfficeNumber => {
                    if (managerOfficeNumber) {
                        return true;
                    } else {
                        return false;
                    }
                }
            }
        ]).then(answers => {
            const manager = new Manager(answers.name, answers.id, answers.email, answers.officeNumber);
            teamMembers.push(manager);
            promptInquirer();
        })
    };

    const addEngineer = () => {
        console.log(
            `Add your engineer's details`
        );

        return inquirer.prompt ([
            {
                type: 'input',
                name: 'name',
                message: 'What is your engineers name? (Required)',
                validate: engineerName => {
                    if (engineerName) {
                        return true;
                    } else {
                        return false;
                    }
                }
            },
            {
                type: 'input',
                name: 'id',
                message: 'What is your engineers id? (Required)',
                validate: engineerId => {
                    if (engineerId) {
                        return true;
                    } else {
                        return false;
                    }
                }
            },
            {
                type: 'input',
                name: 'email',
                message: 'What is your engineers email? (Required)',
                validate: engineerEmail => {
                    if (engineerEmail) {
                        return true;
                    } else {
                        return false;
                    }
                }
            },
            {
                type: 'input',
                name: 'github',
                message: 'What is your engineers github? (Required)',
                validate: engineerGithub => {
                    if (engineerGithub) {
                        return true;
                    } else {
                        return false;
                    }
                }
            }
        ]).then(answers => {
            const engineer = new Engineer(answers.name, answers.id, answers.email, answers.github);
            teamMembers.push(engineer);
            promptInquirer();
        })
    };

    const addIntern = () => {
        console.log(
            `Add your intern's details`
        );

        return inquirer.prompt ([
            {
                type: 'input',
                name: 'name',
                message: 'What is your interns name? (Required)',
                validate: internName => {
                    if (internName) {
                        return true;
                    } else {
                        return false;
                    }
                }
            },
            {
                type: 'input',
                name: 'id',
                message: 'What is your interns id? (Required)',
                validate: internId => {
                    if (internId) {
                        return true;
                    } else {
                        return false;
                    }
                }
            },
            {
                type: 'input',
                name: 'email',
                message: 'What is your interns email? (Required)',
                validate: internEmail => {
                    if (internEmail) {
                        return true;
                    } else {
                        return false;
                    }
                }
            },
            {
                type: 'input',
                name: 'school',
                message: 'What school did your intern attend? (Required)',
                validate: internSchool => {
                    if (internSchool) {
                        return true;
                    } else {
                        return false;
                    }
                }
            }
        ]).then(answers => {
            const intern = new Intern(answers.name, answers.id, answers.email, answers.school);
            teamMembers.push(intern);
            promptInquirer();
        })
    };

//Below is my initial run at making prompt inquirements. I realized soon after that these were not effectively named and that having individual ids for each data string was counter-intuitive for this task. 
        // {
        //     type: 'input',
        //     name: 'name1',
        //     message: 'Please enter your name.'
        // },
        // {
        //     type: 'input',
        //     name: 'id1',
        //     message: 'Please enter your id.'
        // },
        // {
        //     type: 'input',
        //     name: 'email1',
        //     message: 'Please enter your email.'
        // },
        // {
        //     type: 'input',
        //     name: 'role1',
        //     message: 'Employee'
        // },
        // {
        //     type: 'input',
        //     name: 'name2',
        //     message: 'Please enter the engineers name.'
        // },
        // {
        //     type: 'input',
        //     name: 'id2',
        //     message: 'Please enter the engineers id.'
        // },
        // {
        //     type: 'input',
        //     name: 'email2',
        //     message: 'Please enter the egineers email.'
        // },
        // {
        //     type: 'input',
        //     name: 'github',
        //     message: 'Please enter the engineers Github.'
        // },
        // {
        //     type: 'input',
        //     name: 'role2',
        //     message: 'Engineer'
        // },
        // {
        //     type: 'input',
        //     name: 'name3',
        //     message: 'Please enter the managers name.'
        // },
        // {
        //     type: 'input',
        //     name: 'id3',
        //     message: 'Please enter managers id.'
        // },
        // {
        //     type: 'input',
        //     name: 'email3',
        //     message: 'Please enter managers email.'
        // },
        // {
        //     type: 'input',
        //     name: 'officenumber',
        //     message: 'Please enter the managers office number.'
        // },
        // {
        //     type: 'input',
        //     name: 'role3',
        //     message: 'Manager'
        // },
        // {
        //     type: 'input',
        //     name: 'name4',
        //     message: 'Please enter the interns name.'
        // },
        // {
        //     type: 'input',
        //     name: 'id4',
        //     message: 'Please enter the interns id.'
        // },
        // {
        //     type: 'input',
        //     name: 'email4',
        //     message: 'Please enter the interns email.'
        // },
        // {
        //     type: 'input',
        //     name: 'school',
        //     message: 'Please enter the interns school.'
        // },
        // {
        //     type: 'input',
        //     name: 'role4',
        //     message: 'Intern'
        // },


//Next step will be to create a literal template for an HTML, which I'll do in another file so as to test it.
//once that is created in template.html, i will just copy and paste it here with backticks + fill in jQuery input data grabbers
//That literal template will become the generated file, which will be filled in with the argument (answers) via jQuery notation as ${}.


//now we just need an initialization function that calls inquirer and writefile
//also need to make sure that an error is thrown should something fail. 


//One mistake I made here earlier when writing this code was using a .then in the initialization function, which should only be reserved for an asynchronous task.
//there is actually no need to promisify this function, as the rest of the task is carried out within the promptself function, which actually simplifies the code and makes it cleaner.
const initialize = () => {
    promptSelf()
    //inquirer is started
    //now called back to find data and write file + generate html, which is complete above
    //.then implies that writefilesync depends UPON promptself (need to ensure youre)
    //put write fileasync in its own function that is building the team 
    //calling building team 
    //what is a promise? what if we DONT have original value of a variable? dont yet know the value because it may be depending on a user input, etc, something that doesn't exist yet
    //promise gives a way around that problem (via .then, async, etc. we want this value but it doesnt exist YET, but its going to and we want it)
    // .then((answers) => writeFileAsync(outputpath, generateTeam(answers)))
    // //generate team needs to depend on other values than just promptself... look at triggering off of build team 
    // //should give use our file with generated team outside of template literal/prompt combo
    // //can log to just check file written successfully, as per usual
    // .then(() => console.log('file written'))
    // .catch((err) => console.log(err));
};

//lastly, we call our initialize function to kick things off

initialize();

//Please note that the styling of the generated page is written by the starter code; I did not change anything there in order to not overcomplicate things and keep focus on the data generation part of the assignment. 